// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmailCollection {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
}

model EmailVerification {
  id                String  @id @default(uuid())
  email             String  @unique
  verificationToken String
  verification      Boolean @default(false)
}

model Emailname {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String   @unique
  createdAt DateTime @default(now())

  userId  String   @unique
  profile Profile?

  @@unique([email, username])
}

model Profile {
  id        String   @id @default(uuid())
  username  String   @unique
  createdAt DateTime @default(now())
  image     String?
  userId    String   @unique

  user User @relation(fields: [userId], references: [userId])

  requests Request[]

  accepted Accepted[]
}

model Request {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String
  sentAt     DateTime  @default(now())
  acceptedAt DateTime?
  accept     Boolean?  @default(false)

  accepted Accepted[]

  sender Profile @relation(fields: [senderId], references: [userId])

  @@unique([senderId, receiverId])
}

model Accepted {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  acceptedAt DateTime @default(now())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id])

  profileId String
  profile   Profile @relation(fields: [profileId], references: [userId])
}

model Connection {
  id        String @id @default(uuid())
  requestId String
  user1Id   String
  user2Id   String

  @@unique([user1Id, user2Id])
}

model Call {
  id     String @id @default(uuid())
  callId String @unique

  callActive    Boolean @default(false)
  callInitiater String
  callReceiver  String
  callReceived  Boolean @default(false)
}
